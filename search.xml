<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>我好懒啊。。。</title>
    <url>/essay/iamsolazy/</url>
    <content><![CDATA[<p>2021年8月份就心血来潮搭建了博客，结果一点有质量的文章都没得。。。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>发呆</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/uncategorized/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>心血来潮搭建hexo趟坑（一）</title>
    <url>/tech/buildHexoFromZero1/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>　　源于一次偶然机会，购得一性能过剩的服务器，其实也没多过剩（2C4T），主要平时也不是一直满载使用，突然就想着挂个个人网站好了。域名还是有的，就是人懒一直没去备案，暂时就挂靠在 github 和 gitee 上了，coding挂靠国内自定义域名一样需要备案，等后面备案好了就整到自己服务器上了。废话太多了，开始真题。</p>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>　　其实还是挺简单的，</p>
<span id="more"></span>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>第一篇咯</title>
    <url>/essay/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%92%AF/</url>
    <content><![CDATA[<p>  生命在于折腾，第一篇算开始咯</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>饥荒64位独立服务器</title>
    <url>/game/dontstarveserver/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>游戏</category>
      </categories>
      <tags>
        <tag>饥荒</tag>
        <tag>独立服务器</tag>
        <tag>server</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式</title>
    <url>/tech/distribution/</url>
    <content><![CDATA[<h1 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h1><h2 id="一、大型网站系统的特点"><a href="#一、大型网站系统的特点" class="headerlink" title="一、大型网站系统的特点"></a>一、大型网站系统的特点</h2><h3 id="高并发，大流量"><a href="#高并发，大流量" class="headerlink" title="高并发，大流量"></a>高并发，大流量</h3><p>需要面对高并发用户，大流量访问。Google日均PV 35亿，日IP访问数3亿；腾讯QQ的最大在线用户数1.4亿</p>
<h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><p>系统7x24小时不间断服务</p>
<h3 id="海量数据"><a href="#海量数据" class="headerlink" title="海量数据"></a>海量数据</h3><p>需要存储、管理海量数据，需要使用大量服务器。Facebook每周上传的照片数量接近10亿。在国内，还有各个运营商网络互通难的问题。</p>
<span id="more"></span>
<h3 id="安全环境恶劣"><a href="#安全环境恶劣" class="headerlink" title="安全环境恶劣"></a>安全环境恶劣</h3><p>由于互联网的开放性，使得互联网站更容易受到攻击，大型网站几乎每天都会被黑客攻击。</p>
<h3 id="需求快速变更，发布频繁"><a href="#需求快速变更，发布频繁" class="headerlink" title="需求快速变更，发布频繁"></a>需求快速变更，发布频繁</h3><p>和传统软件的版本发布频率不同，互联网产品为快速适应市场，满足用户需求，其产品发布频率极高。一般大型网站的产品每周都有新版本发布上线，中小型网站的发布更频繁，有时候一天会发布几十次。</p>
<h3 id="渐进式发展"><a href="#渐进式发展" class="headerlink" title="渐进式发展"></a>渐进式发展</h3><p>几乎所有的大型互联网网站都是从一个小网站开始，渐进地发展起来的。Facebook是扎克伯格同学在哈佛大学的宿舍里开发的；Google的第一台服务器部署在斯坦福大学的实验室；阿里巴巴是在马云家的客厅诞生的。好的互联网产品都是慢慢运营出来的，不是一开始就开发好的，这也正好与网站架构的发展演化过程对应。</p>
<h2 id="二、大型网站架构演化发展历程"><a href="#二、大型网站架构演化发展历程" class="headerlink" title="二、大型网站架构演化发展历程"></a>二、大型网站架构演化发展历程</h2><p>大型网站的技术挑战主要来自于庞大的用户，高并发的访问和海量的数据，任何简单的业务一旦需要处理数以P计的数据和面对数以亿计的用户，问题就会变得很棘手。大型网站架构主要解决这类问题。</p>
<h3 id="初始阶段的网站架构"><a href="#初始阶段的网站架构" class="headerlink" title="初始阶段的网站架构"></a>初始阶段的网站架构</h3><p>大型网站都是从小型网站发展而来，网站架构也是一样，是从小型网站架构逐步演化进来。小型网站最开始没有太多人访问，只需要一台服务器就绰绰有余，这是的网站架构如下图所示：</p>
<img src="/tech/distribution/%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8.png" class="" title="应用服务器">

<p>应用程序、数据库、文件等所有资源都在一台服务器上。</p>
<h3 id="应用服务和数据服务分离"><a href="#应用服务和数据服务分离" class="headerlink" title="应用服务和数据服务分离"></a>应用服务和数据服务分离</h3><p>随着网站业务的发展，一台服务器逐渐不能满足需求：越来越多的用户访问导致性能越来越差，越来越多的数据导致存储空间不足。这是就需要将应用和数据分离。应用和数据分离后整个网站使用3台服务器：应用服务器、文件服务器和数据库服务器。这3台服务器对硬件资源的要求各不相同：</p>
<blockquote>
<p>应用服务器需要大量的业务逻辑，因此需要更快更强大的CPU；<br>数据库服务器需要快速磁盘检索和数据缓存，因此需要更快的磁盘和更大的内存；<br>文件服务器需要存储大量用户上传的文件，因此需要更大的硬盘。</p>
</blockquote>
<p>此时，网站系统的架构如下图所示：</p>
<img src="/tech/distribution/%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%92%8C%E6%95%B0%E6%8D%AE%E6%9C%8D%E5%8A%A1%E5%88%86%E7%A6%BB.png" class="" title="应用服务和数据服务分离">

<p>应用和数据分离后，不同特性的服务器承担不同的服务角色，网站的并发处理能力和数据存储空间得到了很大改善，支持网站业务进一步发展。但是随着用户逐渐增多，网站又一次面临挑战：数据库压力太大导致访问延迟，进而影响整个网站的性能，用户体验收到影响。这是需要对网站架构进一步优化。</p>
<h3 id="使用缓存改善网站性能"><a href="#使用缓存改善网站性能" class="headerlink" title="使用缓存改善网站性能"></a>使用缓存改善网站性能</h3><p>网站访问的特点和现实世界的财富分配一样遵循二八定律：80%的业务访问集中在20%的数据上。既然大部分业务访问集中在一小部分数据上，那么如果把这一小部分数据缓存在内存中，就可以减少数据库的访问压力，提高整个网站的数据访问速度，改善数据库的写入性能了。网站使用的缓存可以分为两种：缓存在应用服务器上的本地缓存和缓存在专门的分布式缓存服务器上的远程缓存。</p>
<blockquote>
<p>本地缓存的访问速度更快一些，但是受应用服务器内存限制，其缓存数据量有限，而且会出现和应用争用内存的情况。</p>
<p>远程分布式缓存可以使用集群的方式，部署大内存的服务器作为专门的缓存服务器，可以在理论上做到不受内存容量限制的缓存服务。</p>
</blockquote>
<img src="/tech/distribution/%E4%BD%BF%E7%94%A8%E7%BC%93%E5%AD%98.png" class="" title="使用缓存">

<p>使用缓存后，数据访问压力得到有效缓解，但是单一应用服务器能够处理的请求连接有限，在网站访问高峰期，应用服务器成为整个网站的瓶颈。</p>
<h3 id="使用应用服务器集群改善网站的并发处理能力"><a href="#使用应用服务器集群改善网站的并发处理能力" class="headerlink" title="使用应用服务器集群改善网站的并发处理能力"></a>使用应用服务器集群改善网站的并发处理能力</h3><p>使用集群是网站解决高并发、海量数据问题的常用手段。当一台服务器的处理能力、存储空间不足时，不要企图去更换更强大的服务器，对于大型网站而言，不管多么强大的服务器，都满足不了网站持续增长的业务需求。这种情况下，更恰当的做法是增加一台服务器分担原有服务器的访问及存储压力。<strong>对网站架构而言，只要能通过增加一台服务器的方式改善负载均衡压力，就可以以同样的方式持续增加服务器不断改善系统性能，从而实现系统的可伸缩性</strong>。应用服务器实现集群是网站可伸缩架构设计中较为简单成熟的一种，如下图所示</p>
<p>通过负载均衡调度服务器，可以将来自用户浏览器的访问请求分发到应用服务器集群中的任何一台服务器上，如果有更多用户，就在集群中加入更多的应用服务器，是应用服务器的压力不再成为整个网站的瓶颈。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>分布式</tag>
      </tags>
  </entry>
</search>
